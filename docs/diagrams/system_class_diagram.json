{"diagram_type":"class","elements":[{"display_name":"src","elements":[{"display_name":"dbModule","elements":[{"bases":[],"comment":{"formatted":"\n @brief The DbResult class represents a result set returned from a database query.\n\n This class encapsulates the data returned from a database operation and provides methods\n to access and manipulate the result. It stores the result in a JSON array format.\n ","raw":"/**\r\n * @brief The DbResult class represents a result set returned from a database query.\r\n *\r\n * This class encapsulates the data returned from a database operation and provides methods\r\n * to access and manipulate the result. It stores the result in a JSON array format.\r\n */"},"display_name":"DbResult","id":"6960484039840119316","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Holds the result data in a JSON array format.","raw":"///< Holds the result data in a JSON array format."},"is_static":false,"name":"Data_","source_location":{"column":16,"file":"src/dbModule/dbresult.h","line":79,"translation_unit":"app\\main.cpp"},"type":"QJsonArray"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Default constructor for DbResult.\n\n Initializes an empty DbResult object.\n     ","raw":"/**\r\n     * @brief Default constructor for DbResult.\r\n     *\r\n     * Initializes an empty DbResult object.\r\n     */"},"display_name":"DbResult","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"DbResult","parameters":[],"source_location":{"column":5,"file":"src/dbModule/dbresult.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Constructs a DbResult from a list of QVariant data.\n\n @param data A QList<QVariant> containing data to be stored in the result.\n The data is converted into a JSON array of QJsonObjects.\n     ","raw":"/**\r\n     * @brief Constructs a DbResult from a list of QVariant data.\r\n     *\r\n     * @param data A QList<QVariant> containing data to be stored in the result.\r\n     * The data is converted into a JSON array of QJsonObjects.\r\n     */"},"display_name":"DbResult","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"DbResult","parameters":[{"name":"data","type":"const QList<QVariant> &"}],"source_location":{"column":5,"file":"src/dbModule/dbresult.h","line":32,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Checks if the result set is empty.\n\n @return True if the result set is empty, false otherwise.\n     ","raw":"/**\r\n     * @brief Checks if the result set is empty.\r\n     *\r\n     * @return True if the result set is empty, false otherwise.\r\n     */"},"display_name":"isEmpty","is_const":true,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"isEmpty","parameters":[],"source_location":{"column":10,"file":"src/dbModule/dbresult.h","line":39,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Retrieves the first item in the result set.\n\n @return A QJsonObject representing the first item. If the result set is empty, returns an empty QJsonObject.\n     ","raw":"/**\r\n     * @brief Retrieves the first item in the result set.\r\n     *\r\n     * @return A QJsonObject representing the first item. If the result set is empty, returns an empty QJsonObject.\r\n     */"},"display_name":"first","is_const":true,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"first","parameters":[],"source_location":{"column":17,"file":"src/dbModule/dbresult.h","line":46,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"},{"access":"public","comment":{"formatted":"\n @brief Gets the number of items in the result set.\n\n @return The number of items in the result set.\n     ","raw":"/**\r\n     * @brief Gets the number of items in the result set.\r\n     *\r\n     * @return The number of items in the result set.\r\n     */"},"display_name":"size","is_const":true,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"size","parameters":[],"source_location":{"column":9,"file":"src/dbModule/dbresult.h","line":53,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"int"},{"access":"public","comment":{"formatted":"\n @brief Retrieves data at a specific position in the result set.\n\n @param pos The index position of the item to retrieve.\n @return A QJsonObject representing the data at the specified position.\n Returns an empty QJsonObject if the position is out of bounds or if the result set is empty.\n     ","raw":"/**\r\n     * @brief Retrieves data at a specific position in the result set.\r\n     *\r\n     * @param pos The index position of the item to retrieve.\r\n     * @return A QJsonObject representing the data at the specified position.\r\n     * Returns an empty QJsonObject if the position is out of bounds or if the result set is empty.\r\n     */"},"display_name":"data","is_const":true,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"data","parameters":[{"name":"pos","type":"int"}],"source_location":{"column":17,"file":"src/dbModule/dbresult.h","line":62,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"},{"access":"public","comment":{"formatted":"\n @brief Gets all the data in the result set.\n\n @return A QJsonArray containing all the items in the result set.\n     ","raw":"/**\r\n     * @brief Gets all the data in the result set.\r\n     *\r\n     * @return A QJsonArray containing all the items in the result set.\r\n     */"},"display_name":"data","is_const":true,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"data","parameters":[],"source_location":{"column":16,"file":"src/dbModule/dbresult.h","line":69,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonArray"},{"access":"public","comment":{"formatted":"\n @brief Converts the result set to a JSON string.\n\n @return A QString containing the JSON representation of the result set.\n     ","raw":"/**\r\n     * @brief Converts the result set to a JSON string.\r\n     *\r\n     * @return A QString containing the JSON representation of the result set.\r\n     */"},"display_name":"toJsonString","is_const":true,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"toJsonString","parameters":[],"source_location":{"column":13,"file":"src/dbModule/dbresult.h","line":76,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QString"}],"name":"DbResult","namespace":"DB","source_location":{"column":7,"file":"src/dbModule/dbresult.h","line":16,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[],"comment":{"formatted":"\n @struct DatabaseConfig\n @brief Configuration settings for database connections.\n @details This structure holds the necessary parameters for configuring a database connection, including host, port, username, password, and database name.\n ","raw":"/**\r\n * @struct DatabaseConfig\r\n * @brief Configuration settings for database connections.\r\n * @details This structure holds the necessary parameters for configuring a database connection, including host, port, username, password, and database name.\r\n */"},"display_name":"DatabaseConfig","id":"10433389512216933408","is_abstract":false,"is_nested":false,"is_struct":true,"is_template":false,"is_union":false,"members":[{"access":"public","comment":{"formatted":"Database port.","raw":"///< Database port."},"is_static":false,"name":"port","source_location":{"column":7,"file":"src/dbModule/db.h","line":66,"translation_unit":"app\\main.cpp"},"type":"int"},{"access":"public","comment":{"formatted":"Database host.","raw":"///< Database host."},"is_static":false,"name":"host","source_location":{"column":10,"file":"src/dbModule/db.h","line":67,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"public","comment":{"formatted":"Database username.","raw":"///< Database username."},"is_static":false,"name":"username","source_location":{"column":10,"file":"src/dbModule/db.h","line":68,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"public","comment":{"formatted":"Database password.","raw":"///< Database password."},"is_static":false,"name":"password","source_location":{"column":10,"file":"src/dbModule/db.h","line":69,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"public","comment":{"formatted":"Database name.","raw":"///< Database name."},"is_static":false,"name":"dbName","source_location":{"column":10,"file":"src/dbModule/db.h","line":70,"translation_unit":"app\\main.cpp"},"type":"QString"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Default constructor for DatabaseConfig.\n     ","raw":"/**\r\n     * @brief Default constructor for DatabaseConfig.\r\n     */"},"display_name":"DatabaseConfig","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"DatabaseConfig","parameters":[],"source_location":{"column":2,"file":"src/dbModule/db.h","line":31,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Parameterized constructor for DatabaseConfig.\n @param host Database host.\n @param port Database port.\n @param username Database username.\n @param password Database password.\n @param dbname Database name.\n     ","raw":"/**\r\n     * @brief Parameterized constructor for DatabaseConfig.\r\n     * @param host Database host.\r\n     * @param port Database port.\r\n     * @param username Database username.\r\n     * @param password Database password.\r\n     * @param dbname Database name.\r\n     */"},"display_name":"DatabaseConfig","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"DatabaseConfig","parameters":[{"name":"host","type":"const QString &"},{"name":"port","type":"int"},{"name":"username","type":"const QString &"},{"name":"password","type":"const QString &"},{"name":"dbname","type":"const QString &"}],"source_location":{"column":2,"file":"src/dbModule/db.h","line":43,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Sets the database configuration parameters.\n @param host Database host.\n @param port Database port.\n @param username Database username.\n @param password Database password.\n @param dbname Database name.\n     ","raw":"/**\r\n     * @brief Sets the database configuration parameters.\r\n     * @param host Database host.\r\n     * @param port Database port.\r\n     * @param username Database username.\r\n     * @param password Database password.\r\n     * @param dbname Database name.\r\n     */"},"display_name":"set","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"set","parameters":[{"name":"host","type":"const QString &"},{"name":"port","type":"int"},{"name":"username","type":"const QString &"},{"name":"password","type":"const QString &"},{"name":"dbname","type":"const QString &"}],"source_location":{"column":7,"file":"src/dbModule/db.h","line":57,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"}],"name":"DatabaseConfig","namespace":"DB","source_location":{"column":8,"file":"src/dbModule/db.h","line":26,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[],"comment":{"formatted":"\n @class DatabaseManager\n @brief Manages database connections and SQL operations.\n @details This class provides methods for managing database connections, executing SQL queries, and handling transactions.\n ","raw":"/**\r\n * @class DatabaseManager\r\n * @brief Manages database connections and SQL operations.\r\n * @details This class provides methods for managing database connections, executing SQL queries, and handling transactions.\r\n */"},"display_name":"DatabaseManager","id":"13573387592128700325","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Flag indicating if transactions are supported.","raw":"///< Flag indicating if transactions are supported."},"is_static":false,"name":"isSupportTransaction_","source_location":{"column":11,"file":"src/dbModule/db.h","line":350,"translation_unit":"app\\main.cpp"},"type":"bool"},{"access":"private","comment":{"formatted":"WHERE clause.","raw":"///< WHERE clause."},"is_static":false,"name":"Where_","source_location":{"column":14,"file":"src/dbModule/db.h","line":351,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"SELECT clause.","raw":"///< SELECT clause."},"is_static":false,"name":"Select_","source_location":{"column":14,"file":"src/dbModule/db.h","line":352,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"JOIN clause.","raw":"///< JOIN clause."},"is_static":false,"name":"Join_","source_location":{"column":14,"file":"src/dbModule/db.h","line":353,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"Table name.","raw":"///< Table name."},"is_static":false,"name":"Table_","source_location":{"column":14,"file":"src/dbModule/db.h","line":354,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"LIMIT clause.","raw":"///< LIMIT clause."},"is_static":false,"name":"Limit_","source_location":{"column":14,"file":"src/dbModule/db.h","line":355,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"OFFSET clause.","raw":"///< OFFSET clause."},"is_static":false,"name":"Start_","source_location":{"column":14,"file":"src/dbModule/db.h","line":356,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"ORDER BY clause.","raw":"///< ORDER BY clause."},"is_static":false,"name":"Sort_","source_location":{"column":14,"file":"src/dbModule/db.h","line":357,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"GROUP BY clause.","raw":"///< GROUP BY clause."},"is_static":false,"name":"Group_","source_location":{"column":14,"file":"src/dbModule/db.h","line":358,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"List of child DatabaseManager instances.","raw":"///< List of child DatabaseManager instances."},"is_static":false,"name":"Childs_","source_location":{"column":26,"file":"src/dbModule/db.h","line":359,"translation_unit":"app\\main.cpp"},"type":"QList<DatabaseManager *>"},{"access":"private","comment":{"formatted":"Parent DatabaseManager instance.","raw":"///< Parent DatabaseManager instance."},"is_static":false,"name":"Parent_","source_location":{"column":20,"file":"src/dbModule/db.h","line":360,"translation_unit":"app\\main.cpp"},"type":"DatabaseManager *"},{"access":"private","comment":{"formatted":"Last executed query.","raw":"///< Last executed query."},"is_static":false,"name":"LastQuery_","source_location":{"column":14,"file":"src/dbModule/db.h","line":361,"translation_unit":"app\\main.cpp"},"type":"QString"},{"access":"private","comment":{"formatted":"ID of the last inserted record.","raw":"///< ID of the last inserted record."},"is_static":false,"name":"InsertedId_","source_location":{"column":14,"file":"src/dbModule/db.h","line":362,"translation_unit":"app\\main.cpp"},"type":"QVariant"},{"access":"private","comment":{"formatted":"Last error occurred.","raw":"///< Last error occurred."},"is_static":false,"name":"LastError_","source_location":{"column":15,"file":"src/dbModule/db.h","line":363,"translation_unit":"app\\main.cpp"},"type":"QSqlError"},{"access":"private","comment":{"formatted":"List of created tables.","raw":"///< List of created tables."},"is_static":true,"name":"Created_","source_location":{"column":22,"file":"src/dbModule/db.h","line":347,"translation_unit":"app\\main.cpp"},"type":"QStringList"},{"access":"private","comment":{"formatted":"List of tables with update timestamps.","raw":"///< List of tables with update timestamps."},"is_static":true,"name":"Update_","source_location":{"column":22,"file":"src/dbModule/db.h","line":348,"translation_unit":"app\\main.cpp"},"type":"QStringList"},{"access":"private","comment":{"formatted":"List of tables with soft delete support.","raw":"///< List of tables with soft delete support."},"is_static":true,"name":"SoftDelete_","source_location":{"column":22,"file":"src/dbModule/db.h","line":349,"translation_unit":"app\\main.cpp"},"type":"QStringList"}],"methods":[{"access":"private","comment":{"formatted":"\n @brief Private constructor for singleton pattern.\n     ","raw":"/**\r\n     * @brief Private constructor for singleton pattern.\r\n     */"},"display_name":"DatabaseManager","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"DatabaseManager","parameters":[],"source_location":{"column":2,"file":"src/dbModule/db.h","line":84,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Destructor for DatabaseManager.\n     ","raw":"/**\r\n     * @brief Destructor for DatabaseManager.\r\n     */"},"display_name":"~DatabaseManager","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"~DatabaseManager","parameters":[],"source_location":{"column":2,"file":"src/dbModule/db.h","line":90,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Creates an instance of DatabaseManager.\n @param checkDBName Flag to check database name.\n @param newConnection Flag to create a new connection.\n @param err Pointer to store error message.\n @return Pointer to DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Creates an instance of DatabaseManager.\r\n     * @param checkDBName Flag to check database name.\r\n     * @param newConnection Flag to create a new connection.\r\n     * @param err Pointer to store error message.\r\n     * @return Pointer to DatabaseManager instance.\r\n     */"},"display_name":"createInstance","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":true,"is_virtual":false,"name":"createInstance","parameters":[{"default_value":"false","name":"checkDBName","type":"bool"},{"default_value":"false","name":"newConnection","type":"bool"},{"default_value":"nullptr","name":"err","type":"QString *"}],"source_location":{"column":26,"file":"src/dbModule/db.h","line":99,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Sets the database settings.\n @param host Database host.\n @param port Database port.\n @param username Database username.\n @param password Database password.\n @param dbname Database name.\n @return True if settings are set successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Sets the database settings.\r\n     * @param host Database host.\r\n     * @param port Database port.\r\n     * @param username Database username.\r\n     * @param password Database password.\r\n     * @param dbname Database name.\r\n     * @return True if settings are set successfully, false otherwise.\r\n     */"},"display_name":"setDbSetting","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":true,"is_virtual":false,"name":"setDbSetting","parameters":[{"name":"host","type":"const QString &"},{"name":"port","type":"int"},{"name":"username","type":"const QString &"},{"name":"password","type":"const QString &"},{"name":"dbname","type":"const QString &"}],"source_location":{"column":14,"file":"src/dbModule/db.h","line":111,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Checks the database connection.\n @param error Reference to store error message.\n @return True if connection is successful, false otherwise.\n     ","raw":"/**\r\n     * @brief Checks the database connection.\r\n     * @param error Reference to store error message.\r\n     * @return True if connection is successful, false otherwise.\r\n     */"},"display_name":"checkConnection","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":true,"is_virtual":false,"name":"checkConnection","parameters":[{"name":"error","type":"QString &"}],"source_location":{"column":14,"file":"src/dbModule/db.h","line":119,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Resets the query settings.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Resets the query settings.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"reset","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"reset","parameters":[],"source_location":{"column":19,"file":"src/dbModule/db.h","line":125,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Selects columns for the query.\n @param value Columns to select.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Selects columns for the query.\r\n     * @param value Columns to select.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"select","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"select","parameters":[{"name":"value","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":132,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Sets the table for the query.\n @param value Table name.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Sets the table for the query.\r\n     * @param value Table name.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"table","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"table","parameters":[{"name":"value","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":139,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds a WHERE clause to the query.\n @param value Condition for the WHERE clause.\n @param val Value for the condition.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds a WHERE clause to the query.\r\n     * @param value Condition for the WHERE clause.\r\n     * @param val Value for the condition.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"where","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"where","parameters":[{"name":"value","type":"const QString &"},{"default_value":"QVariant()","name":"val","type":"const QVariant &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":147,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds a LIKE clause to the query.\n @param value Column name.\n @param val Value for the LIKE clause.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds a LIKE clause to the query.\r\n     * @param value Column name.\r\n     * @param val Value for the LIKE clause.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"like","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"like","parameters":[{"name":"value","type":"const QString &"},{"name":"val","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":155,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds a LIKE clause with a postfix wildcard to the query.\n @param value Column name.\n @param val Value for the LIKE clause.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds a LIKE clause with a postfix wildcard to the query.\r\n     * @param value Column name.\r\n     * @param val Value for the LIKE clause.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"likePost","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"likePost","parameters":[{"name":"value","type":"const QString &"},{"name":"val","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":163,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds a native LIKE clause to the query.\n @param value Column name.\n @param val Value for the LIKE clause.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds a native LIKE clause to the query.\r\n     * @param value Column name.\r\n     * @param val Value for the LIKE clause.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"likeNative","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"likeNative","parameters":[{"name":"value","type":"const QString &"},{"name":"val","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":171,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds an OR condition to the WHERE clause.\n @param value Condition for the OR clause.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds an OR condition to the WHERE clause.\r\n     * @param value Condition for the OR clause.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"whereOr","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"whereOr","parameters":[{"name":"value","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":178,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds a JOIN clause to the query.\n @param value JOIN clause.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds a JOIN clause to the query.\r\n     * @param value JOIN clause.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"join","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"join","parameters":[{"name":"value","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":185,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds a LIMIT clause to the query.\n @param limit Number of records to limit.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds a LIMIT clause to the query.\r\n     * @param limit Number of records to limit.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"limit","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"limit","parameters":[{"name":"limit","type":"int"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":192,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds an OFFSET clause to the query.\n @param start Offset value.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds an OFFSET clause to the query.\r\n     * @param start Offset value.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"start","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"start","parameters":[{"name":"start","type":"int"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":199,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds an ORDER BY clause to the query.\n @param sort Sorting criteria.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds an ORDER BY clause to the query.\r\n     * @param sort Sorting criteria.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"sort","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"sort","parameters":[{"name":"sort","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":206,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Adds a GROUP BY clause to the query.\n @param group Grouping criteria.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Adds a GROUP BY clause to the query.\r\n     * @param group Grouping criteria.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"group","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"group","parameters":[{"name":"group","type":"const QString &"}],"source_location":{"column":19,"file":"src/dbModule/db.h","line":213,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Gets the SQL SELECT query.\n @param select Optional select clause.\n @return SQL SELECT query as a string.\n     ","raw":"/**\r\n     * @brief Gets the SQL SELECT query.\r\n     * @param select Optional select clause.\r\n     * @return SQL SELECT query as a string.\r\n     */"},"display_name":"getSelectQuery","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"getSelectQuery","parameters":[{"default_value":"QString()","name":"select","type":"const QString &"}],"source_location":{"column":10,"file":"src/dbModule/db.h","line":220,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QString"},{"access":"public","comment":{"formatted":"\n @brief Gets the last error occurred.\n @return QSqlError object containing the last error.\n     ","raw":"/**\r\n     * @brief Gets the last error occurred.\r\n     * @return QSqlError object containing the last error.\r\n     */"},"display_name":"lastError","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"lastError","parameters":[],"source_location":{"column":12,"file":"src/dbModule/db.h","line":226,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QSqlError"},{"access":"public","comment":{"formatted":"\n @brief Gets the ID of the last inserted record.\n @return ID of the last inserted record.\n     ","raw":"/**\r\n     * @brief Gets the ID of the last inserted record.\r\n     * @return ID of the last inserted record.\r\n     */"},"display_name":"lastInsertedId","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"lastInsertedId","parameters":[],"source_location":{"column":11,"file":"src/dbModule/db.h","line":232,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QVariant"},{"access":"public","comment":{"formatted":"\n @brief Gets the last executed query.\n @return Last executed query as a string.\n     ","raw":"/**\r\n     * @brief Gets the last executed query.\r\n     * @return Last executed query as a string.\r\n     */"},"display_name":"lastQuery","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"lastQuery","parameters":[],"source_location":{"column":10,"file":"src/dbModule/db.h","line":238,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QString"},{"access":"public","comment":{"formatted":"\n @brief Executes the built query.\n @return DbResult object containing the result of the query.\n     ","raw":"/**\r\n     * @brief Executes the built query.\r\n     * @return DbResult object containing the result of the query.\r\n     */"},"display_name":"exec","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"exec","parameters":[],"source_location":{"column":11,"file":"src/dbModule/db.h","line":244,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DbResult"},{"access":"public","comment":{"formatted":"\n @brief Executes a SQL query.\n @param sql SQL query to execute.\n @return DbResult object containing the result of the query.\n     ","raw":"/**\r\n     * @brief Executes a SQL query.\r\n     * @param sql SQL query to execute.\r\n     * @return DbResult object containing the result of the query.\r\n     */"},"display_name":"execResult","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"execResult","parameters":[{"name":"sql","type":"const QString &"}],"source_location":{"column":11,"file":"src/dbModule/db.h","line":251,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DbResult"},{"access":"public","comment":{"formatted":"\n @brief Executes a SELECT query on a specified table.\n @param tableName Name of the table.\n @return DbResult object containing the result of the query.\n     ","raw":"/**\r\n     * @brief Executes a SELECT query on a specified table.\r\n     * @param tableName Name of the table.\r\n     * @return DbResult object containing the result of the query.\r\n     */"},"display_name":"get","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"get","parameters":[{"name":"tableName","type":"const QString &"}],"source_location":{"column":11,"file":"src/dbModule/db.h","line":258,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DbResult"},{"access":"public","comment":{"formatted":"\n @brief Executes a SQL command.\n @param sqlcommand SQL command to execute.\n @return True if the command executed successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Executes a SQL command.\r\n     * @param sqlcommand SQL command to execute.\r\n     * @return True if the command executed successfully, false otherwise.\r\n     */"},"display_name":"exec","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"exec","parameters":[{"name":"sqlcommand","type":"const QString &"}],"source_location":{"column":7,"file":"src/dbModule/db.h","line":265,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Inserts data into a specified table.\n @param table Name of the table.\n @param data Data to insert.\n @return True if the data was inserted successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Inserts data into a specified table.\r\n     * @param table Name of the table.\r\n     * @param data Data to insert.\r\n     * @return True if the data was inserted successfully, false otherwise.\r\n     */"},"display_name":"insert","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"insert","parameters":[{"name":"table","type":"const QString &"},{"name":"data","type":"const QVariantMap &"}],"source_location":{"column":7,"file":"src/dbModule/db.h","line":273,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Updates data in a specified table.\n @param table Name of the table.\n @param data Data to update.\n @return True if the data was updated successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Updates data in a specified table.\r\n     * @param table Name of the table.\r\n     * @param data Data to update.\r\n     * @return True if the data was updated successfully, false otherwise.\r\n     */"},"display_name":"update","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"update","parameters":[{"name":"table","type":"const QString &"},{"name":"data","type":"const QVariantMap &"}],"source_location":{"column":7,"file":"src/dbModule/db.h","line":281,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Deletes data from a specified table.\n @param table Name of the table.\n @return True if the data was deleted successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Deletes data from a specified table.\r\n     * @param table Name of the table.\r\n     * @return True if the data was deleted successfully, false otherwise.\r\n     */"},"display_name":"del","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"del","parameters":[{"name":"table","type":"const QString &"}],"source_location":{"column":7,"file":"src/dbModule/db.h","line":288,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Gets the count of records matching the query criteria.\n @return Count of records.\n     ","raw":"/**\r\n     * @brief Gets the count of records matching the query criteria.\r\n     * @return Count of records.\r\n     */"},"display_name":"count","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"count","parameters":[],"source_location":{"column":6,"file":"src/dbModule/db.h","line":294,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"int"},{"access":"public","comment":{"formatted":"\n @brief Clones the current DatabaseManager instance.\n @return Pointer to the cloned DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Clones the current DatabaseManager instance.\r\n     * @return Pointer to the cloned DatabaseManager instance.\r\n     */"},"display_name":"clone","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"clone","parameters":[],"source_location":{"column":19,"file":"src/dbModule/db.h","line":300,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Begins a transaction.\n @return True if the transaction started successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Begins a transaction.\r\n     * @return True if the transaction started successfully, false otherwise.\r\n     */"},"display_name":"beginTransaction","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"beginTransaction","parameters":[],"source_location":{"column":7,"file":"src/dbModule/db.h","line":306,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Commits a transaction.\n @return True if the transaction was committed successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Commits a transaction.\r\n     * @return True if the transaction was committed successfully, false otherwise.\r\n     */"},"display_name":"commit","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"commit","parameters":[],"source_location":{"column":7,"file":"src/dbModule/db.h","line":312,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Rolls back a transaction.\n @return True if the transaction was rolled back successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Rolls back a transaction.\r\n     * @return True if the transaction was rolled back successfully, false otherwise.\r\n     */"},"display_name":"rollback","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"rollback","parameters":[],"source_location":{"column":7,"file":"src/dbModule/db.h","line":318,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Checks if transactions are supported.\n @return True if transactions are supported, false otherwise.\n     ","raw":"/**\r\n     * @brief Checks if transactions are supported.\r\n     * @return True if transactions are supported, false otherwise.\r\n     */"},"display_name":"isSupportTransaction","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"isSupportTransaction","parameters":[],"source_location":{"column":14,"file":"src/dbModule/db.h","line":324,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"public","comment":{"formatted":"\n @brief Clears the SELECT clause.\n @return Pointer to the DatabaseManager instance.\n     ","raw":"/**\r\n     * @brief Clears the SELECT clause.\r\n     * @return Pointer to the DatabaseManager instance.\r\n     */"},"display_name":"clearSelect","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"clearSelect","parameters":[],"source_location":{"column":26,"file":"src/dbModule/db.h","line":333,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"DatabaseManager *"},{"access":"public","comment":{"formatted":"\n @brief Truncates a specified table.\n @param table Name of the table.\n @return True if the table was truncated successfully, false otherwise.\n     ","raw":"/**\r\n     * @brief Truncates a specified table.\r\n     * @param table Name of the table.\r\n     * @return True if the table was truncated successfully, false otherwise.\r\n     */"},"display_name":"truncateTable","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"truncateTable","parameters":[{"name":"table","type":"const QString &"}],"source_location":{"column":7,"file":"src/dbModule/db.h","line":344,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"private","comment":{"formatted":"\n @brief Gets the database connection.\n @return QSqlDatabase object representing the database connection.\n     ","raw":"/**\r\n     * @brief Gets the database connection.\r\n     * @return QSqlDatabase object representing the database connection.\r\n     */"},"display_name":"getDatabase","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":true,"is_virtual":false,"name":"getDatabase","parameters":[],"source_location":{"column":22,"file":"src/dbModule/db.h","line":369,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QSqlDatabase"},{"access":"private","comment":{"formatted":"\n @brief Initializes the database connection.\n @param host Database host.\n @param port Database port.\n @param username Database username.\n @param password Database password.\n @param dbname Database name.\n @param checkDBName Flag to check database name.\n @param newConnection Flag to create a new connection.\n @return True if initialization was successful, false otherwise.\n     ","raw":"/**\r\n     * @brief Initializes the database connection.\r\n     * @param host Database host.\r\n     * @param port Database port.\r\n     * @param username Database username.\r\n     * @param password Database password.\r\n     * @param dbname Database name.\r\n     * @param checkDBName Flag to check database name.\r\n     * @param newConnection Flag to create a new connection.\r\n     * @return True if initialization was successful, false otherwise.\r\n     */"},"display_name":"init","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"init","parameters":[{"name":"host","type":"const QString &"},{"name":"port","type":"int"},{"name":"username","type":"const QString &"},{"name":"password","type":"const QString &"},{"name":"dbname","type":"const QString &"},{"default_value":"false","name":"checkDBName","type":"bool"},{"default_value":"false","name":"newConnection","type":"bool"}],"source_location":{"column":7,"file":"src/dbModule/db.h","line":382,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"private","comment":{"formatted":"\n @brief Processes the query after execution.\n @param query Pointer to the QSqlQuery object.\n     ","raw":"/**\r\n     * @brief Processes the query after execution.\r\n     * @param query Pointer to the QSqlQuery object.\r\n     */"},"display_name":"postQuery","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"postQuery","parameters":[{"name":"query","type":"QSqlQuery *"}],"source_location":{"column":7,"file":"src/dbModule/db.h","line":389,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"private","comment":{"formatted":"\n @brief Converts data to a string format.\n @param map Data to convert.\n @return Data as a string.\n     ","raw":"/**\r\n     * @brief Converts data to a string format.\r\n     * @param map Data to convert.\r\n     * @return Data as a string.\r\n     */"},"display_name":"dataToString","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"dataToString","parameters":[{"name":"map","type":"const QVariantMap &"}],"source_location":{"column":10,"file":"src/dbModule/db.h","line":396,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QString"}],"name":"DatabaseManager","namespace":"DB","source_location":{"column":7,"file":"src/dbModule/db.h","line":78,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"}],"name":"dbModule","type":"directory"},{"display_name":"requestModule","elements":[{"display_name":"Requests","elements":[{"bases":[],"comment":{"formatted":"\n @brief The Request class is an abstract base class for handling different types of requests.\n\n This class provides the common interface and utility functions for processing various requests.\n It includes methods for checking database connectivity and creating error responses.\n ","raw":"/**\r\n * @brief The Request class is an abstract base class for handling different types of requests.\r\n *\r\n * This class provides the common interface and utility functions for processing various requests.\r\n * It includes methods for checking database connectivity and creating error responses.\r\n */"},"display_name":"Request","id":"4354387044733077778","is_abstract":true,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[],"methods":[{"access":"protected","comment":{"formatted":"\n @brief Checks if the database connection is valid.\n\n This method verifies that the database connection manager is not null and that the database\n is properly connected. Logs error messages if the connection fails.\n\n @param dbManager A pointer to the DB::DatabaseManager instance used for checking the connection.\n @return True if the database connection is valid, false otherwise.\n     ","raw":"/**\r\n     * @brief Checks if the database connection is valid.\r\n     *\r\n     * This method verifies that the database connection manager is not null and that the database\r\n     * is properly connected. Logs error messages if the connection fails.\r\n     *\r\n     * @param dbManager A pointer to the DB::DatabaseManager instance used for checking the connection.\r\n     * @return True if the database connection is valid, false otherwise.\r\n     */"},"display_name":"isDBConnectionValid","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"isDBConnectionValid","parameters":[{"name":"dbManager","type":"DB::DatabaseManager *"}],"source_location":{"column":7,"file":"src/requestModule/Requests/Request.h","line":36,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"bool"},{"access":"protected","comment":{"formatted":"\n @brief Creates a JSON response indicating a database connection error.\n\n This method constructs a JSON response object with a status of false and a message indicating\n an internal server error related to database connectivity.\n\n @param response A reference to the QJsonObject that will be populated with the error response.\n @param dataObj A reference to the QJsonObject that contains additional data about the error.\n @return The updated QJsonObject containing the error response.\n     ","raw":"/**\r\n     * @brief Creates a JSON response indicating a database connection error.\r\n     *\r\n     * This method constructs a JSON response object with a status of false and a message indicating\r\n     * an internal server error related to database connectivity.\r\n     *\r\n     * @param response A reference to the QJsonObject that will be populated with the error response.\r\n     * @param dataObj A reference to the QJsonObject that contains additional data about the error.\r\n     * @return The updated QJsonObject containing the error response.\r\n     */"},"display_name":"CreateDBConnectionError","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"CreateDBConnectionError","parameters":[{"name":"response","type":"QJsonObject &"},{"name":"dataObj","type":"QJsonObject &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/Request.h","line":65,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"},{"access":"protected","comment":{"formatted":"\n @brief Creates a generic error JSON response.\n\n This method constructs a JSON response object with a status of false and a custom error message.\n\n @param response A reference to the QJsonObject that will be populated with the error response.\n @param dataObj A reference to the QJsonObject that contains additional data about the error.\n @param message A QString containing the error message to include in the response.\n @return The updated QJsonObject containing the error response.\n     ","raw":"/**\r\n     * @brief Creates a generic error JSON response.\r\n     *\r\n     * This method constructs a JSON response object with a status of false and a custom error message.\r\n     *\r\n     * @param response A reference to the QJsonObject that will be populated with the error response.\r\n     * @param dataObj A reference to the QJsonObject that contains additional data about the error.\r\n     * @param message A QString containing the error message to include in the response.\r\n     * @return The updated QJsonObject containing the error response.\r\n     */"},"display_name":"CreateErrorResponse","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"CreateErrorResponse","parameters":[{"name":"response","type":"QJsonObject &"},{"name":"dataObj","type":"QJsonObject &"},{"name":"message","type":"QString"}],"source_location":{"column":14,"file":"src/requestModule/Requests/Request.h","line":90,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"},{"access":"public","comment":{"formatted":"\n @brief Virtual destructor for the Request class.\n\n Ensures proper cleanup of derived classes.\n     ","raw":"/**\r\n     * @brief Virtual destructor for the Request class.\r\n     *\r\n     * Ensures proper cleanup of derived classes.\r\n     */"},"display_name":"~Request","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"~Request","parameters":[],"source_location":{"column":10,"file":"src/requestModule/Requests/Request.h","line":112,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Pure virtual method to execute a request.\n\n This method must be implemented by derived classes to handle specific types of requests.\n\n @param jsonObj A QJsonObject containing the request data.\n @param m A QMutex reference for thread-safe operations.\n @return A QJsonObject containing the response data.\n     ","raw":"/**\r\n     * @brief Pure virtual method to execute a request.\r\n     *\r\n     * This method must be implemented by derived classes to handle specific types of requests.\r\n     *\r\n     * @param jsonObj A QJsonObject containing the request data.\r\n     * @param m A QMutex reference for thread-safe operations.\r\n     * @return A QJsonObject containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":true,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":22,"file":"src/requestModule/Requests/Request.h","line":125,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"Request","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/Request.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The LoginRequest class handles user login requests.\n\n This class processes login requests, validates user credentials, and returns the login status.\n ","raw":"/**\r\n * @brief The LoginRequest class handles user login requests.\r\n *\r\n * This class processes login requests, validates user credentials, and returns the login status.\r\n */"},"display_name":"LoginRequest","id":"1633855435523401023","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":23,"file":"src/requestModule/Requests/LoginRequest.h","line":16,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the LoginRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the LoginRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"LoginRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"LoginRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/LoginRequest.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the login request.\n\n This method processes the JSON request to validate user credentials.\n It checks the database for the provided email and password, and returns the login status.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n @uml{note[] A comment I have access to.}\n     ","raw":"/**\r\n     * @brief Executes the login request.\r\n     *\r\n     * This method processes the JSON request to validate user credentials.\r\n     * It checks the database for the provided email and password, and returns the login status.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n\t * @uml{note[] A comment I have access to.}\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/LoginRequest.h","line":40,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"LoginRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/LoginRequest.h","line":13,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The GetAccountNumberRequest class handles the retrieval of account numbers.\n\n This class processes requests to retrieve the account number associated with a user's email.\n It performs database operations to fetch the account number and returns the result.\n ","raw":"/**\r\n * @brief The GetAccountNumberRequest class handles the retrieval of account numbers.\r\n *\r\n * This class processes requests to retrieve the account number associated with a user's email.\r\n * It performs database operations to fetch the account number and returns the result.\r\n */"},"display_name":"GetAccountNumberRequest","id":"12710989722481167264","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":23,"file":"src/requestModule/Requests/GetAccountNumberRequest.h","line":16,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the GetAccountNumberRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the GetAccountNumberRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"GetAccountNumberRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"GetAccountNumberRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/GetAccountNumberRequest.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the request to get the account number.\n\n This method processes the JSON request to retrieve the account number associated with\n a user's email. It validates the input data, checks the database connection, and fetches\n the account number from the database.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the request to get the account number.\r\n     *\r\n     * This method processes the JSON request to retrieve the account number associated with\r\n     * a user's email. It validates the input data, checks the database connection, and fetches\r\n     * the account number from the database.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/GetAccountNumberRequest.h","line":40,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"GetAccountNumberRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/GetAccountNumberRequest.h","line":13,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The GetBalanceRequest class handles the retrieval of account balances.\n\n This class processes requests to retrieve the balance associated with an account number.\n It performs database operations to fetch the balance and returns the result.\n ","raw":"/**\r\n * @brief The GetBalanceRequest class handles the retrieval of account balances.\r\n *\r\n * This class processes requests to retrieve the balance associated with an account number.\r\n * It performs database operations to fetch the balance and returns the result.\r\n */"},"display_name":"GetBalanceRequest","id":"11752401552383491906","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":23,"file":"src/requestModule/Requests/GetBalanceRequest.h","line":16,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the GetBalanceRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the GetBalanceRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"GetBalanceRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"GetBalanceRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/GetBalanceRequest.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the request to get the account balance.\n\n This method processes the JSON request to retrieve the balance associated with\n an account number. It validates the input data, checks the database connection,\n and fetches the balance from the database.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the request to get the account balance.\r\n     *\r\n     * This method processes the JSON request to retrieve the balance associated with\r\n     * an account number. It validates the input data, checks the database connection,\r\n     * and fetches the balance from the database.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/GetBalanceRequest.h","line":40,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"GetBalanceRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/GetBalanceRequest.h","line":13,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The GetTransactionsHistoryRequest class handles the retrieval of transaction history.\n\n This class processes requests to retrieve transaction history for a user or an admin.\n It performs database operations and returns the transaction details.\n ","raw":"/**\r\n * @brief The GetTransactionsHistoryRequest class handles the retrieval of transaction history.\r\n *\r\n * This class processes requests to retrieve transaction history for a user or an admin.\r\n * It performs database operations and returns the transaction details.\r\n */"},"display_name":"GetTransactionsHistoryRequest","id":"10218503219500069835","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":23,"file":"src/requestModule/Requests/GetTransactionsHistoryRequest.h","line":16,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the GetTransactionsHistoryRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the GetTransactionsHistoryRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"GetTransactionsHistoryRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"GetTransactionsHistoryRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/GetTransactionsHistoryRequest.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the request to get the transaction history.\n\n This method processes the JSON request to retrieve transaction history for a user or admin.\n It validates the input data, checks the database connection, and fetches the data from the database.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the request to get the transaction history.\r\n     *\r\n     * This method processes the JSON request to retrieve transaction history for a user or admin.\r\n     * It validates the input data, checks the database connection, and fetches the data from the database.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/GetTransactionsHistoryRequest.h","line":39,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"GetTransactionsHistoryRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/GetTransactionsHistoryRequest.h","line":13,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The MakeTransactionRequest class handles transaction requests between accounts.\n\n This class processes transaction requests, validates account details, and updates account balances.\n ","raw":"/**\r\n * @brief The MakeTransactionRequest class handles transaction requests between accounts.\r\n *\r\n * This class processes transaction requests, validates account details, and updates account balances.\r\n */"},"display_name":"MakeTransactionRequest","id":"13100223563862354982","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":23,"file":"src/requestModule/Requests/MakeTransactionRequest.h","line":15,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the MakeTransactionRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the MakeTransactionRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"MakeTransactionRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"MakeTransactionRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/MakeTransactionRequest.h","line":23,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the transaction request.\n\n This method processes the JSON request to transfer funds between accounts.\n It checks the database for account validity and balance, updates the balances, and logs the transaction.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the transaction request.\r\n     *\r\n     * This method processes the JSON request to transfer funds between accounts.\r\n     * It checks the database for account validity and balance, updates the balances, and logs the transaction.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/MakeTransactionRequest.h","line":38,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"MakeTransactionRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/MakeTransactionRequest.h","line":12,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The GetDatabaseRequest class handles the retrieval of the entire database.\n\n This class processes requests to retrieve all users and their associated accounts\n from the database. It performs database operations and returns the result.\n ","raw":"/**\r\n * @brief The GetDatabaseRequest class handles the retrieval of the entire database.\r\n *\r\n * This class processes requests to retrieve all users and their associated accounts\r\n * from the database. It performs database operations and returns the result.\r\n */"},"display_name":"GetDatabaseRequest","id":"2013764729148086543","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":26,"file":"src/requestModule/Requests/GetDatabaseRequest.h","line":16,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the GetDatabaseRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the GetDatabaseRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"GetDatabaseRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"GetDatabaseRequest","parameters":[],"source_location":{"column":5,"file":"src/requestModule/Requests/GetDatabaseRequest.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the request to get the entire database.\n\n This method processes the JSON request to retrieve all users and their\n associated accounts. It validates the input data, checks the database connection,\n and fetches the data from the database.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the request to get the entire database.\r\n     *\r\n     * This method processes the JSON request to retrieve all users and their\r\n     * associated accounts. It validates the input data, checks the database connection,\r\n     * and fetches the data from the database.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/GetDatabaseRequest.h","line":40,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"GetDatabaseRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/GetDatabaseRequest.h","line":13,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The CreateNewUserRequest class handles the creation of new users.\n\n This class processes requests to create new users, ensuring that the request\n originates from an admin and that all required fields are provided. It also\n handles database operations for adding the new user and their account if applicable.\n ","raw":"/**\r\n * @brief The CreateNewUserRequest class handles the creation of new users.\r\n *\r\n * This class processes requests to create new users, ensuring that the request\r\n * originates from an admin and that all required fields are provided. It also\r\n * handles database operations for adding the new user and their account if applicable.\r\n */"},"display_name":"CreateNewUserRequest","id":"7232843274662702843","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":26,"file":"src/requestModule/Requests/CreateNewUserRequest.h","line":17,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the CreateNewUserRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the CreateNewUserRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"CreateNewUserRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"CreateNewUserRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/CreateNewUserRequest.h","line":26,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the request to create a new user.\n\n This method processes the JSON request to create a new user. It validates\n the input data, checks the database connection, and ensures that the request\n is made by an admin. If all validations pass, it creates a new user and their\n account in the database.\n\n @param jsonObj A QJsonObject containing the request data.\n @param m A QMutex reference for thread-safe operations.\n @return A QJsonObject containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the request to create a new user.\r\n     *\r\n     * This method processes the JSON request to create a new user. It validates\r\n     * the input data, checks the database connection, and ensures that the request\r\n     * is made by an admin. If all validations pass, it creates a new user and their\r\n     * account in the database.\r\n     *\r\n     * @param jsonObj A QJsonObject containing the request data.\r\n     * @param m A QMutex reference for thread-safe operations.\r\n     * @return A QJsonObject containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/CreateNewUserRequest.h","line":43,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"CreateNewUserRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/CreateNewUserRequest.h","line":14,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The DeleteUserRequest class handles the deletion of users.\n\n This class processes requests to delete users, ensuring that the request\n originates from an admin and that the account number provided is valid.\n It performs database operations to remove the user and their associated account.\n ","raw":"/**\r\n * @brief The DeleteUserRequest class handles the deletion of users.\r\n *\r\n * This class processes requests to delete users, ensuring that the request\r\n * originates from an admin and that the account number provided is valid.\r\n * It performs database operations to remove the user and their associated account.\r\n */"},"display_name":"DeleteUserRequest","id":"2664988866812332938","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":23,"file":"src/requestModule/Requests/DeleteUserRequest.h","line":17,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the DeleteUserRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the DeleteUserRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"DeleteUserRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"DeleteUserRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/DeleteUserRequest.h","line":25,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the request to delete a user.\n\n This method processes the JSON request to delete a user. It validates\n the input data, checks the database connection, and ensures that the request\n is made by an admin. If all validations pass, it deletes the user and their\n account from the database.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the request to delete a user.\r\n     *\r\n     * This method processes the JSON request to delete a user. It validates\r\n     * the input data, checks the database connection, and ensures that the request\r\n     * is made by an admin. If all validations pass, it deletes the user and their\r\n     * account from the database.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/DeleteUserRequest.h","line":42,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"DeleteUserRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/DeleteUserRequest.h","line":14,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The UpdateUserRequest class handles user update requests.\n\n This class processes requests to update user details, including first name,\n last name, email, and role. It ensures that the requester has the necessary\n permissions and that the updated email is not already associated with another user.\n ","raw":"/**\r\n * @brief The UpdateUserRequest class handles user update requests.\r\n *\r\n * This class processes requests to update user details, including first name,\r\n * last name, email, and role. It ensures that the requester has the necessary\r\n * permissions and that the updated email is not already associated with another user.\r\n */"},"display_name":"UpdateUserRequest","id":"7645390992448267112","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":23,"file":"src/requestModule/Requests/UpdateUserRequest.h","line":17,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the UpdateUserRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the UpdateUserRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"UpdateUserRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"UpdateUserRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/UpdateUserRequest.h","line":25,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the user update request.\n\n This method processes the JSON request to update user details. It validates\n the requester's role, checks if the email is already associated with another\n user, and updates the user information in the database.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the user update request.\r\n     *\r\n     * This method processes the JSON request to update user details. It validates\r\n     * the requester's role, checks if the email is already associated with another\r\n     * user, and updates the user information in the database.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/UpdateUserRequest.h","line":41,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"UpdateUserRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/UpdateUserRequest.h","line":14,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The UserInitRequest class handles user initialization requests for User Widget and Admin Widget\n\n This class processes requests to initialize user information based on their\n credentials. It retrieves user details and account information if applicable,\n and prepares a response with the user's role and associated data.\n ","raw":"/**\r\n * @brief The UserInitRequest class handles user initialization requests for User Widget and Admin Widget\r\n *\r\n * This class processes requests to initialize user information based on their\r\n * credentials. It retrieves user details and account information if applicable,\r\n * and prepares a response with the user's role and associated data.\r\n */"},"display_name":"UserInitRequest","id":"15500654025726302953","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":26,"file":"src/requestModule/Requests/UserInitRequest.h","line":17,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the UserInitRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the UserInitRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"UserInitRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"UserInitRequest","parameters":[],"source_location":{"column":5,"file":"src/requestModule/Requests/UserInitRequest.h","line":25,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the user initialization request.\n\n This method processes the JSON request to initialize user information by validating\n the user's credentials and retrieving their details from the database. If the user\n is a regular user, it also retrieves their account number and current balance.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the user initialization request.\r\n     *\r\n     * This method processes the JSON request to initialize user information by validating\r\n     * the user's credentials and retrieving their details from the database. If the user\r\n     * is a regular user, it also retrieves their account number and current balance.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/UserInitRequest.h","line":41,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"UserInitRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/UserInitRequest.h","line":14,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The UpdateEmailRequest class handles email update requests for users.\n\n This class processes email update requests, validates user credentials, checks for existing emails,\n and updates the email in the database.\n ","raw":"/**\r\n * @brief The UpdateEmailRequest class handles email update requests for users.\r\n *\r\n * This class processes email update requests, validates user credentials, checks for existing emails,\r\n * and updates the email in the database.\r\n */"},"display_name":"UpdateEmailRequest","id":"2660278549059451925","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":23,"file":"src/requestModule/Requests/UpdateEmailRequest.h","line":16,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the UpdateEmailRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the UpdateEmailRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"UpdateEmailRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"UpdateEmailRequest","parameters":[],"source_location":{"column":2,"file":"src/requestModule/Requests/UpdateEmailRequest.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the email update request.\n\n This method processes the JSON request to update the user's email.\n It validates user credentials, checks if the new email is already in use, and updates the email in the database.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the email update request.\r\n     *\r\n     * This method processes the JSON request to update the user's email.\r\n     * It validates user credentials, checks if the new email is already in use, and updates the email in the database.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/UpdateEmailRequest.h","line":39,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"UpdateEmailRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/UpdateEmailRequest.h","line":13,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"4354387044733077778","is_virtual":false,"name":"Request"}],"comment":{"formatted":"\n @brief The UpdatePasswordRequest class handles password update requests for users.\n\n This class processes password update requests, validates user credentials,\n and updates the password in the database.\n ","raw":"/**\r\n * @brief The UpdatePasswordRequest class handles password update requests for users.\r\n *\r\n * This class processes password update requests, validates user credentials,\r\n * and updates the password in the database.\r\n */"},"display_name":"UpdatePasswordRequest","id":"13647470015345896002","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the DatabaseManager instance.","raw":"///< Pointer to the DatabaseManager instance."},"is_static":false,"name":"dbManager","source_location":{"column":26,"file":"src/requestModule/Requests/UpdatePasswordRequest.h","line":16,"translation_unit":"app\\main.cpp"},"type":"DB::DatabaseManager *"}],"methods":[{"access":"public","comment":{"formatted":"\n @brief Constructor for the UpdatePasswordRequest class.\n\n Initializes the DatabaseManager instance for handling database operations.\n     ","raw":"/**\r\n     * @brief Constructor for the UpdatePasswordRequest class.\r\n     *\r\n     * Initializes the DatabaseManager instance for handling database operations.\r\n     */"},"display_name":"UpdatePasswordRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"UpdatePasswordRequest","parameters":[],"source_location":{"column":5,"file":"src/requestModule/Requests/UpdatePasswordRequest.h","line":24,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Executes the password update request.\n\n This method processes the JSON request to update the user's password.\n It validates user credentials and updates the password in the database.\n\n @param jsonObj The JSON object containing the request data.\n @param m The mutex to lock during the execution.\n @return A JSON object containing the response data.\n     ","raw":"/**\r\n     * @brief Executes the password update request.\r\n     *\r\n     * This method processes the JSON request to update the user's password.\r\n     * It validates user credentials and updates the password in the database.\r\n     *\r\n     * @param jsonObj The JSON object containing the request data.\r\n     * @param m The mutex to lock during the execution.\r\n     * @return A JSON object containing the response data.\r\n     */"},"display_name":"execute","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"execute","parameters":[{"name":"jsonObj","type":"const QJsonObject &"},{"name":"m","type":"QMutex &"}],"source_location":{"column":14,"file":"src/requestModule/Requests/UpdatePasswordRequest.h","line":39,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"}],"name":"UpdatePasswordRequest","namespace":"","source_location":{"column":7,"file":"src/requestModule/Requests/UpdatePasswordRequest.h","line":13,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"}],"name":"Requests","type":"directory"},{"bases":[],"comment":{"formatted":"\n @brief The RequestManager class handles incoming requests and dispatches them to the appropriate request handler.\n\n The RequestManager class is responsible for managing and processing different types of requests.\n It maintains a map of request handlers for various request types, processes incoming request data,\n and generates appropriate responses. The class also includes error handling for JSON parsing issues.\n ","raw":"/**\r\n * @brief The RequestManager class handles incoming requests and dispatches them to the appropriate request handler.\r\n *\r\n * The RequestManager class is responsible for managing and processing different types of requests.\r\n * It maintains a map of request handlers for various request types, processes incoming request data,\r\n * and generates appropriate responses. The class also includes error handling for JSON parsing issues.\r\n */"},"display_name":"RequestManager","id":"17581648629732253705","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Mutex for thread-safe operations.","raw":"///< Mutex for thread-safe operations."},"is_static":false,"name":"Mutex_","source_location":{"column":13,"file":"src/requestModule/RequestManager.h","line":33,"translation_unit":"app\\main.cpp"},"type":"QMutex *"},{"access":"private","comment":{"formatted":"Map of request handlers indexed by request type.","raw":"///< Map of request handlers indexed by request type."},"is_static":false,"name":"requests_","source_location":{"column":22,"file":"src/requestModule/RequestManager.h","line":34,"translation_unit":"app\\main.cpp"},"type":"QMap<int,Request *>"}],"methods":[{"access":"private","comment":{"formatted":"\n @brief Handles JSON parsing errors and creates a corresponding error response.\n\n @param parseError A QJsonParseError object that contains details about the parsing error.\n @return A QJsonObject containing the error response with an error message and status.\n     ","raw":"/**\r\n     * @brief Handles JSON parsing errors and creates a corresponding error response.\r\n     *\r\n     * @param parseError A QJsonParseError object that contains details about the parsing error.\r\n     * @return A QJsonObject containing the error response with an error message and status.\r\n     */"},"display_name":"handleJsonParseError","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"handleJsonParseError","parameters":[{"name":"parseError","type":"const QJsonParseError &"}],"source_location":{"column":14,"file":"src/requestModule/RequestManager.h","line":42,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QJsonObject"},{"access":"public","comment":{"formatted":"\n @brief Constructs a RequestManager with the specified mutex for thread safety.\n\n @param Mutex A pointer to a QMutex used to ensure thread-safe operations.\n     ","raw":"/**\r\n     * @brief Constructs a RequestManager with the specified mutex for thread safety.\r\n     *\r\n     * @param Mutex A pointer to a QMutex used to ensure thread-safe operations.\r\n     */"},"display_name":"RequestManager","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"RequestManager","parameters":[{"name":"Mutex","type":"QMutex *"}],"source_location":{"column":2,"file":"src/requestModule/RequestManager.h","line":93,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Processes an incoming request and generates an appropriate response.\n\n @param data A QByteArray containing the request data in JSON format.\n @return A QByteArray containing the response data in JSON format.\n\n This method parses the incoming JSON data, determines the type of request, and delegates the processing\n to the corresponding request handler. It also handles JSON parsing errors and generates error responses if needed.\n     ","raw":"/**\r\n     * @brief Processes an incoming request and generates an appropriate response.\r\n     *\r\n     * @param data A QByteArray containing the request data in JSON format.\r\n     * @return A QByteArray containing the response data in JSON format.\r\n     *\r\n     * This method parses the incoming JSON data, determines the type of request, and delegates the processing\r\n     * to the corresponding request handler. It also handles JSON parsing errors and generates error responses if needed.\r\n     */"},"display_name":"makeRequest","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"makeRequest","parameters":[{"name":"data","type":"QByteArray"}],"source_location":{"column":13,"file":"src/requestModule/RequestManager.h","line":118,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QByteArray"},{"access":"public","comment":{"formatted":"\n @brief Destructor for the RequestManager.\n\n Cleans up any resources allocated by the RequestManager.\n     ","raw":"/**\r\n     * @brief Destructor for the RequestManager.\r\n     *\r\n     * Cleans up any resources allocated by the RequestManager.\r\n     */"},"display_name":"~RequestManager","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"~RequestManager","parameters":[],"source_location":{"column":2,"file":"src/requestModule/RequestManager.h","line":166,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"}],"name":"RequestManager","namespace":"","source_location":{"column":7,"file":"src/requestModule/RequestManager.h","line":30,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"comment":{"formatted":"\n @brief Enum representing the different types of requests handled by the RequestManager.\n\n This enum defines various request types and special requests that the RequestManager can handle.\n     ","raw":"/**\r\n     * @brief Enum representing the different types of requests handled by the RequestManager.\r\n     *\r\n     * This enum defines various request types and special requests that the RequestManager can handle.\r\n     */"},"constants":["Login","GetAccountnumber","GetBalance","GetTransactionsHistory","MakeTransaction","TransferAmount","GetDatabase","CreateNewUser","DeleteUser","UpdateUser","UserInit","UpdateEmail","UpdatePassword","JsonParseError"],"display_name":"RequestManager::AvailableRequests","id":"14397068199454785176","is_nested":true,"name":"RequestManager::AvailableRequests","namespace":"","source_location":{"column":7,"file":"src/requestModule/RequestManager.h","line":70,"translation_unit":"app\\main.cpp"},"type":"enum"}],"name":"requestModule","type":"directory"},{"display_name":"serverModule","elements":[{"bases":[{"access":"public","id":"16211548264686477707","is_virtual":false,"name":"QObject"},{"access":"public","id":"4900694373792446597","is_virtual":false,"name":"QRunnable"}],"comment":{"formatted":"\n @brief The ServerHandler class handles incoming client connections in a separate thread.\n\n This class is responsible for managing communication with a client, verifying data integrity using\n cryptographic hashes, and processing requests through the RequestManager. It operates in a separate\n thread to ensure that the server remains responsive.\n ","raw":"/**\r\n * @brief The ServerHandler class handles incoming client connections in a separate thread.\r\n *\r\n * This class is responsible for managing communication with a client, verifying data integrity using\r\n * cryptographic hashes, and processing requests through the RequestManager. It operates in a separate\r\n * thread to ensure that the server remains responsive.\r\n */"},"display_name":"ServerHandler","id":"1512818839078814394","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"The socket descriptor for the incoming connection.","raw":"///< The socket descriptor for the incoming connection."},"is_static":false,"name":"handle_","source_location":{"column":12,"file":"src/serverModule/serverhandler.h","line":70,"translation_unit":"app\\main.cpp"},"type":"qintptr"},{"access":"private","comment":{"formatted":"Pointer to the QTcpSocket used for client communication.","raw":"///< Pointer to the QTcpSocket used for client communication."},"is_static":false,"name":"clientSocket_","source_location":{"column":15,"file":"src/serverModule/serverhandler.h","line":71,"translation_unit":"app\\main.cpp"},"type":"QTcpSocket *"},{"access":"private","comment":{"formatted":"Pointer to the mutex used for synchronization.","raw":"///< Pointer to the mutex used for synchronization."},"is_static":false,"name":"Mutex_","source_location":{"column":12,"file":"src/serverModule/serverhandler.h","line":72,"translation_unit":"app\\main.cpp"},"type":"QMutex *"},{"access":"private","comment":{"formatted":"Pointer to the RequestManager for processing requests.","raw":"///< Pointer to the RequestManager for processing requests."},"is_static":false,"name":"requestManager","source_location":{"column":18,"file":"src/serverModule/serverhandler.h","line":73,"translation_unit":"app\\main.cpp"},"type":"RequestManager *"},{"access":"public","is_static":true,"name":"staticMetaObject","source_location":{"column":30,"file":"build/D","line":123,"translation_unit":"app\\main.cpp"},"type":"const QMetaObject"}],"methods":[{"access":"public","display_name":"metaObject","is_const":true,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"metaObject","parameters":[],"source_location":{"column":32,"file":"build/D","line":124,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"const QMetaObject *"},{"access":"public","display_name":"qt_metacast","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"qt_metacast","parameters":[{"name":"","type":"const char *"}],"source_location":{"column":19,"file":"build/D","line":125,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void *"},{"access":"public","display_name":"qt_metacall","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"qt_metacall","parameters":[{"name":"","type":"QMetaObject::Call"},{"name":"","type":"int"},{"name":"","type":"void **"}],"source_location":{"column":17,"file":"build/D","line":126,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"int"},{"access":"public","display_name":"tr","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":true,"is_virtual":false,"name":"tr","parameters":[{"name":"s","type":"const char *"},{"default_value":"nullptr","name":"c","type":"const char *"},{"default_value":"-1","name":"n","type":"int"}],"source_location":{"column":27,"file":"build/D","line":85,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QString"},{"access":"private","display_name":"qt_static_metacall","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":true,"is_virtual":false,"name":"qt_static_metacall","parameters":[{"name":"","type":"QObject *"},{"name":"","type":"QMetaObject::Call"},{"name":"","type":"int"},{"name":"","type":"void **"}],"source_location":{"column":47,"file":"build/D","line":130,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Constructs a ServerHandler object with the specified parameters.\n\n Initializes the ServerHandler with a mutex, socket handle, and optional parent QObject.\n\n @param m Pointer to a QMutex used for synchronization.\n @param handle The socket descriptor for the incoming connection.\n @param parent The parent QObject.\n     ","raw":"/**\r\n     * @brief Constructs a ServerHandler object with the specified parameters.\r\n     *\r\n     * Initializes the ServerHandler with a mutex, socket handle, and optional parent QObject.\r\n     *\r\n     * @param m Pointer to a QMutex used for synchronization.\r\n     * @param handle The socket descriptor for the incoming connection.\r\n     * @param parent The parent QObject.\r\n     */"},"display_name":"ServerHandler","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"ServerHandler","parameters":[{"name":"m","type":"QMutex *"},{"default_value":"0","name":"handle","type":"qintptr"},{"default_value":"nullptr","name":"parent","type":"QObject *"}],"source_location":{"column":11,"file":"src/serverModule/serverhandler.h","line":39,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Destructor for the ServerHandler class.\n\n Cleans up resources by deleting the client socket and RequestManager.\n     ","raw":"/**\r\n     * @brief Destructor for the ServerHandler class.\r\n     *\r\n     * Cleans up resources by deleting the client socket and RequestManager.\r\n     */"},"display_name":"~ServerHandler","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"~ServerHandler","parameters":[],"source_location":{"column":2,"file":"src/serverModule/serverhandler.h","line":46,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Slot to handle readyRead signal from QTcpSocket.\n\n Reads data from the client socket, verifies its integrity using a cryptographic hash, and\n processes the request using RequestManager. Sends the response back to the client.\n     ","raw":"/**\r\n     * @brief Slot to handle readyRead signal from QTcpSocket.\r\n     *\r\n     * Reads data from the client socket, verifies its integrity using a cryptographic hash, and\r\n     * processes the request using RequestManager. Sends the response back to the client.\r\n     */"},"display_name":"readyRead","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"readyRead","parameters":[],"source_location":{"column":7,"file":"src/serverModule/serverhandler.h","line":54,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Implements QRunnable's run method to handle the client connection.\n\n Sets up the client socket, connects signals for reading data and disconnection, and starts\n the event loop to process client requests.\n     ","raw":"/**\r\n     * @brief Implements QRunnable's run method to handle the client connection.\r\n     *\r\n     * Sets up the client socket, connects signals for reading data and disconnection, and starts\r\n     * the event loop to process client requests.\r\n     */"},"display_name":"run","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"run","parameters":[],"source_location":{"column":7,"file":"src/serverModule/serverhandler.h","line":62,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"}],"name":"ServerHandler","namespace":"","source_location":{"column":7,"file":"src/serverModule/serverhandler.h","line":26,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"},{"bases":[{"access":"public","id":"7607021355591114400","is_virtual":false,"name":"QTcpServer"}],"comment":{"formatted":"\n @brief The Server class extends QTcpServer to handle incoming network connections.\n\n This class sets up a TCP server, manages incoming connections using a thread pool, and handles\n incoming requests with instances of the ServerHandler class. It supports multithreaded\n processing and provides methods to start and stop the server.\n ","raw":"/**\r\n * @brief The Server class extends QTcpServer to handle incoming network connections.\r\n *\r\n * This class sets up a TCP server, manages incoming connections using a thread pool, and handles\r\n * incoming requests with instances of the ServerHandler class. It supports multithreaded\r\n * processing and provides methods to start and stop the server.\r\n */"},"display_name":"Server","id":"6556302699635904946","is_abstract":false,"is_nested":false,"is_struct":false,"is_template":false,"is_union":false,"members":[{"access":"private","comment":{"formatted":"Pointer to the thread pool used for handling connections.","raw":"///< Pointer to the thread pool used for handling connections."},"is_static":false,"name":"threadPool","source_location":{"column":15,"file":"src/serverModule/server.h","line":71,"translation_unit":"app\\main.cpp"},"type":"QThreadPool *"},{"access":"private","comment":{"formatted":"Mutex for synchronizing access to shared resources.","raw":"///< Mutex for synchronizing access to shared resources."},"is_static":false,"name":"Mutex_","source_location":{"column":12,"file":"src/serverModule/server.h","line":72,"translation_unit":"app\\main.cpp"},"type":"QMutex *"},{"access":"public","is_static":true,"name":"staticMetaObject","source_location":{"column":30,"file":"build/D","line":123,"translation_unit":"app\\main.cpp"},"type":"const QMetaObject"}],"methods":[{"access":"public","display_name":"metaObject","is_const":true,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"metaObject","parameters":[],"source_location":{"column":32,"file":"build/D","line":124,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"const QMetaObject *"},{"access":"public","display_name":"qt_metacast","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"qt_metacast","parameters":[{"name":"","type":"const char *"}],"source_location":{"column":19,"file":"build/D","line":125,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void *"},{"access":"public","display_name":"qt_metacall","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"qt_metacall","parameters":[{"name":"","type":"QMetaObject::Call"},{"name":"","type":"int"},{"name":"","type":"void **"}],"source_location":{"column":17,"file":"build/D","line":126,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"int"},{"access":"public","display_name":"tr","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":true,"is_virtual":false,"name":"tr","parameters":[{"name":"s","type":"const char *"},{"default_value":"nullptr","name":"c","type":"const char *"},{"default_value":"-1","name":"n","type":"int"}],"source_location":{"column":27,"file":"build/D","line":85,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"QString"},{"access":"private","display_name":"qt_static_metacall","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":true,"is_virtual":false,"name":"qt_static_metacall","parameters":[{"name":"","type":"QObject *"},{"name":"","type":"QMetaObject::Call"},{"name":"","type":"int"},{"name":"","type":"void **"}],"source_location":{"column":47,"file":"build/D","line":130,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Constructs a Server object with an optional parent.\n\n Initializes the thread pool and mutex, and sets the maximum thread count for handling\n incoming connections.\n\n @param parent The parent QObject.\n     ","raw":"/**\r\n     * @brief Constructs a Server object with an optional parent.\r\n     *\r\n     * Initializes the thread pool and mutex, and sets the maximum thread count for handling\r\n     * incoming connections.\r\n     *\r\n     * @param parent The parent QObject.\r\n     */"},"display_name":"Server","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":true,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"Server","parameters":[{"default_value":"nullptr","name":"parent","type":"QObject *"}],"source_location":{"column":11,"file":"src/serverModule/server.h","line":37,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Destructor for the Server class.\n\n Cleans up resources by clearing and deleting the thread pool.\n     ","raw":"/**\r\n     * @brief Destructor for the Server class.\r\n     *\r\n     * Cleans up resources by clearing and deleting the thread pool.\r\n     */"},"display_name":"~Server","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"~Server","parameters":[],"source_location":{"column":2,"file":"src/serverModule/server.h","line":44,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Starts the server and listens for incoming connections on the specified port.\n\n @param port The port number to listen on (default is 2222).\n     ","raw":"/**\r\n     * @brief Starts the server and listens for incoming connections on the specified port.\r\n     *\r\n     * @param port The port number to listen on (default is 2222).\r\n     */"},"display_name":"start","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"start","parameters":[{"default_value":"2222","name":"port","type":"qint16"}],"source_location":{"column":7,"file":"src/serverModule/server.h","line":55,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"public","comment":{"formatted":"\n @brief Stops the server by closing the listening socket.\n     ","raw":"/**\r\n     * @brief Stops the server by closing the listening socket.\r\n     */"},"display_name":"quit","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":false,"name":"quit","parameters":[],"source_location":{"column":7,"file":"src/serverModule/server.h","line":60,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"},{"access":"protected","comment":{"formatted":"\n @brief Handles incoming connections by creating and starting a ServerHandler instance.\n\n @param handle The socket descriptor for the incoming connection.\n     ","raw":"/**\r\n     * @brief Handles incoming connections by creating and starting a ServerHandler instance.\r\n     *\r\n     * @param handle The socket descriptor for the incoming connection.\r\n     */"},"display_name":"incomingConnection","is_const":false,"is_consteval":false,"is_constexpr":false,"is_constructor":false,"is_copy_assignment":false,"is_coroutine":false,"is_defaulted":false,"is_deleted":false,"is_move_assignment":false,"is_noexcept":false,"is_operator":false,"is_pure_virtual":false,"is_static":false,"is_virtual":true,"name":"incomingConnection","parameters":[{"name":"handle","type":"qintptr"}],"source_location":{"column":7,"file":"src/serverModule/server.h","line":68,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"void"}],"name":"Server","namespace":"","source_location":{"column":7,"file":"src/serverModule/server.h","line":25,"translation_unit":"app\\main.cpp"},"template_parameters":[],"type":"class"}],"name":"serverModule","type":"directory"}],"name":"src","type":"directory"}],"metadata":{"clang_uml_version":"0.5.3","llvm_version":"clang version 18.1.1 (https://github.com/llvm/llvm-project.git dba2a75e9c7ef81fe84774ba5eee5e67e01d801a)","schema_version":2},"name":"system_class_diagram","package_type":"directory","relationships":[{"access":"public","destination":"6960484039840119316","source":"13573387592128700325","type":"dependency"},{"access":"private","destination":"6290076278466584172","label":"Childs_","source":"13573387592128700325","type":"aggregation"},{"access":"private","destination":"13573387592128700325","label":"Parent_","source":"13573387592128700325","type":"association"},{"access":"public","destination":"13573387592128700325","source":"4354387044733077778","type":"dependency"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"1633855435523401023","type":"association"},{"access":"public","destination":"4354387044733077778","source":"1633855435523401023","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"12710989722481167264","type":"association"},{"access":"public","destination":"4354387044733077778","source":"12710989722481167264","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"11752401552383491906","type":"association"},{"access":"public","destination":"4354387044733077778","source":"11752401552383491906","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"10218503219500069835","type":"association"},{"access":"public","destination":"4354387044733077778","source":"10218503219500069835","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"13100223563862354982","type":"association"},{"access":"public","destination":"4354387044733077778","source":"13100223563862354982","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"2013764729148086543","type":"association"},{"access":"public","destination":"4354387044733077778","source":"2013764729148086543","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"7232843274662702843","type":"association"},{"access":"public","destination":"4354387044733077778","source":"7232843274662702843","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"2664988866812332938","type":"association"},{"access":"public","destination":"4354387044733077778","source":"2664988866812332938","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"7645390992448267112","type":"association"},{"access":"public","destination":"4354387044733077778","source":"7645390992448267112","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"15500654025726302953","type":"association"},{"access":"public","destination":"4354387044733077778","source":"15500654025726302953","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"2660278549059451925","type":"association"},{"access":"public","destination":"4354387044733077778","source":"2660278549059451925","type":"extension"},{"access":"private","destination":"13573387592128700325","label":"dbManager","source":"13647470015345896002","type":"association"},{"access":"public","destination":"4354387044733077778","source":"13647470015345896002","type":"extension"},{"access":"private","destination":"10766129546548808022","label":"requests_","source":"17581648629732253705","type":"aggregation"},{"access":"public","destination":"17581648629732253705","source":"14397068199454785176","type":"containment"},{"access":"private","destination":"17581648629732253705","label":"requestManager","source":"1512818839078814394","type":"association"},{"access":"public","destination":"16211548264686477707","source":"1512818839078814394","type":"extension"},{"access":"public","destination":"4900694373792446597","source":"1512818839078814394","type":"extension"},{"access":"public","destination":"7607021355591114400","source":"6556302699635904946","type":"extension"}],"title":"This Diagram shows the relationship between all system components"}